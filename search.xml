<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HPE综述</title>
    <url>/post/f4697f57/</url>
    <content><![CDATA[<h1 id="Monocular-Human-Pose-Estimation-A-Survey-of-Deep-Learning-based-Methods"><a href="#Monocular-Human-Pose-Estimation-A-Survey-of-Deep-Learning-based-Methods" class="headerlink" title="Monocular Human Pose Estimation: A Survey of Deep Learning-based Methods"></a>Monocular Human Pose Estimation: A Survey of Deep Learning-based Methods</h1><h2 id="HPE-类别"><a href="#HPE-类别" class="headerlink" title="HPE 类别"></a>HPE 类别</h2><ol>
<li>generative（human body model-based)：<br>人体模型结构作为先验，几何上从不同视角投影到二位或三维空间，高维参数空间用回归的方式优化</li>
<li>discriminative (human body model-free)<br>从输入源直接学习一个映射，或者搜索现有案例(不用人体模型)；更快但是对没有训练过的姿态健壮性不足</li>
</ol>
<hr>
<p>多人pose estimation</p>
<ol>
<li><p>top-down<br>先探测人，产生位置的bounding box</p>
</li>
<li><p>bottom-up</p>
<p>先预测每个人所有的身体部位，再用人体模型拟合或者其他算法进行分组</p>
<p>当人变多时top-down计算花费明显提高，但如果有大规模的重叠，bottom-up方法在重组肢体上可能会遇到问题</p>
</li>
</ol>
<hr>
<ol>
<li><p>regression-based<br>直接从输入图片map关节坐标，或则得到人体模型参数</p>
</li>
<li><p>dectection-based(中间生成关节位置图像块或热图)   </p>
<p>将身体部位当作探测目标依据两个经常使用概念：关节部位的图像块和热图</p>
<p>小区域表示鲁棒性更强；小区域的检测结果限制了最终关节坐标的精度</p>
</li>
</ol>
<hr>
<ol>
<li><p>one-stage</p>
</li>
<li><p>multi-stage</p>
<p>有中间监督；例如先检测人的位置再顾及人体姿势</p>
<p>3D的HPE先在2d表面预测关节位置再将它们拓展到3D空间</p>
</li>
</ol>
<h3 id="人体模型"><a href="#人体模型" class="headerlink" title="人体模型"></a>人体模型</h3><p>一个成熟的人体模型不必包含所有身体特征，但是需要满足构建和描述人体姿势的特殊任务的需求</p>
<ol>
<li><p>骨架模型</p>
<p>代表一系列的关节位置和相应的遵从人体骨架结构的肢体方向</p>
<p>也可以描述为一个图，顶点代表关节，用边代表骨架结构中关节的链接和约束</p>
</li>
<li><p>轮廓模型</p>
<p>早期用的比较多</p>
</li>
<li><p>体模型</p>
<p>早期是圆锥圆柱，现在都用mesh</p>
</li>
</ol>
<hr>
<h2 id="2D人体姿态估计"><a href="#2D人体姿态估计" class="headerlink" title="2D人体姿态估计"></a>2D人体姿态估计</h2><h3 id="2D单人姿态估计"><a href="#2D单人姿态估计" class="headerlink" title="2D单人姿态估计"></a>2D单人姿态估计</h3><ol>
<li>先检测出单人，依据标注的人的中心位置和身体比例从原始图像中剪裁</li>
<li>regression-based 方法通过一个端到端的框架直接学习和预测坐标位置</li>
<li>detection-based方法先通过学习关节的或身体部位的矩形框，或者热图(每个都通过一个一关节位置为中心的2D高斯分布来显式一个关节位置)预测出身体部位的大致位置，再进行回归</li>
<li>Soft-argmax函数能将热图转化为关节坐标；将一个dectection-based网络变成一个可微分的回归网络</li>
</ol>
<h4 id="Regression-based-methods"><a href="#Regression-based-methods" class="headerlink" title="Regression-based methods"></a>Regression-based methods</h4><p>直接回归出坐标，缺点太多</p>
<h4 id="Detection-based-methods"><a href="#Detection-based-methods" class="headerlink" title="Detection-based methods"></a>Detection-based methods</h4><p>每个关节占据一个热图通道用一个一目标关节位置为中心的2D高斯分布</p>
<p>因为热图表示比坐标表示更有鲁棒性，大部分最近的研究都基于热图表示</p>
<p>有大量的工作在做这个方向</p>
<hr>
<h2 id="2D多人姿态估计"><a href="#2D多人姿态估计" class="headerlink" title="2D多人姿态估计"></a>2D多人姿态估计</h2><p>需要同时进行detection和localization</p>
<h3 id="Top-down-methods"><a href="#Top-down-methods" class="headerlink" title="Top-down methods"></a>Top-down methods</h3><p>效果依赖人体目标检测的结果，速度较慢，大都是非实时的</p>
<h3 id="Bottom-up-methods"><a href="#Bottom-up-methods" class="headerlink" title="Bottom-up methods"></a>Bottom-up methods</h3><p>需要进行joint dection和joint candiate grouping</p>
<p>速度快，但是容易收到复杂背景和人体遮挡的影响</p>
<p>stoa是top-down但是速度慢</p>
<hr>
<h2 id="3D人体姿态估"><a href="#3D人体姿态估" class="headerlink" title="3D人体姿态估"></a>3D人体姿态估</h2><p>单眼相机应用非常广泛，深度神经网络有能力预测dense depth和sparse depth points</p>
<h3 id="model-free-methods"><a href="#model-free-methods" class="headerlink" title="model-free methods"></a>model-free methods</h3><ol>
<li>直接将图片映射到3D位置</li>
<li>从预测的2D姿态上接着预测深度信息</li>
</ol>
<h3 id="Model-based-methods"><a href="#Model-based-methods" class="headerlink" title="Model-based methods"></a>Model-based methods</h3><ol>
<li>有很多工作基于SMPL(一个人体模型)，估计人体3D参数</li>
<li>运动学模型的运用也很广泛</li>
<li>还有自监督学习（可以研究的一个方向)</li>
<li>latent 3D pose model</li>
</ol>
<hr>
<h2 id="3D多人姿态估计"><a href="#3D多人姿态估计" class="headerlink" title="3D多人姿态估计"></a>3D多人姿态估计</h2><ol>
<li>研究方向很新工作较少</li>
<li>大都是多阶段</li>
</ol>
<hr>
<h2 id="数据集和评估指标"><a href="#数据集和评估指标" class="headerlink" title="数据集和评估指标"></a>数据集和评估指标</h2><h3 id="2D人体姿态估计数据集"><a href="#2D人体姿态估计数据集" class="headerlink" title="2D人体姿态估计数据集"></a>2D人体姿态估计数据集</h3><ol>
<li>FILC</li>
<li>LSP</li>
<li>MPII</li>
<li>COCO</li>
<li>AIC-HKD</li>
<li>Penn Action</li>
<li>J-HMDB</li>
<li>PoseTrack</li>
</ol>
<h3 id="2D人体姿态估计评价指标"><a href="#2D人体姿态估计评价指标" class="headerlink" title="2D人体姿态估计评价指标"></a>2D人体姿态估计评价指标</h3><ol>
<li><p>Percentage of Correct Parts(PCP)</p>
</li>
<li><p>Percentage of Correct Keypoints(PCK)</p>
</li>
<li><p>AP</p>
<p>每个点是单独算precision的，最后算所有点的平均</p>
</li>
<li><p>GFLOPs(速度)</p>
</li>
</ol>
<hr>
<h3 id="3D人体姿态估计数据集"><a href="#3D人体姿态估计数据集" class="headerlink" title="3D人体姿态估计数据集"></a>3D人体姿态估计数据集</h3><ol>
<li><p>HumanEva-I&amp;IIDatasets</p>
<p>有采集的3D坐标</p>
</li>
<li><p>Human3.6Mdataset</p>
</li>
<li><p>TNT15 Dataset</p>
</li>
<li><p>MPI-INF-3DHP</p>
</li>
<li><p>TotalCapture Dataset</p>
</li>
<li><p>MARCOnI Dataset(乱)</p>
</li>
<li><p>Panoptic Dataset</p>
</li>
<li><p>3DPW Dataset</p>
</li>
</ol>
<h3 id="3D人体姿态估计的评价指标"><a href="#3D人体姿态估计的评价指标" class="headerlink" title="3D人体姿态估计的评价指标"></a>3D人体姿态估计的评价指标</h3><ol>
<li>Mean Per Joint Positon Error(MPJPE)</li>
<li>PCK和AUC</li>
</ol>
]]></content>
      <categories>
        <category>HPE</category>
      </categories>
      <tags>
        <tag>deep learning</tag>
        <tag>CV</tag>
        <tag>python</tag>
        <tag>survey</tag>
      </tags>
  </entry>
  <entry>
    <title>在这里</title>
    <url>/post/4f46e11/</url>
    <content><![CDATA[<p>javascript是一门充满活力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。即使是经验丰富的javascript开发者，如果没有认真学习的话，也无法真正理解它们，这就是javascript的矛盾之处。由于javascript不必理解就可以使用，因此通常来说很难真正理解语言本身，这就是我们面临的挑战。不满足于只是让代码正常工作，而是想要弄清楚为什么，勇于挑战这条崎岖颠簸的少有人走的路，拥抱整个javascript</p>
<span id="more"></span>后面的内容在首页不显示，只显示到<!--more-->这里

]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Itk之PointSet</title>
    <url>/post/f8b294b7/</url>
    <content><![CDATA[<ol>
<li>用<code>TransformPhysucalPointToIndex(point,pixelIndex)</code>将point点坐标映射到Index上</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将点坐标转化为Index</span></span><br><span class="line"><span class="keyword">typedef</span> itk::Point&lt; <span class="keyword">double</span>, ImageType::ImageDimension &gt; PointType;</span><br><span class="line">pintType piont = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">ImageType::IndexType pixelIndex;</span><br><span class="line"><span class="keyword">bool</span> isInside = image-&gt;<span class="built_in">TransformPhysicalPointToIndex</span>( point, pixelIndex ); <span class="keyword">if</span> ( isInside ) &#123;</span><br><span class="line">ImageType::PixelType pixelValue = image-&gt;<span class="built_in">GetPixel</span>( pixelIndex ); pixelValue += <span class="number">5</span>; image-&gt;<span class="built_in">SetPixel</span>( pixelIndex, pixelValue ); &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>从缓冲获得图片  </li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*=========================================================================</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Copyright NumFOCUS</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> *  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> *  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *         http://www.apache.org/licenses/LICENSE-2.0.txt</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> *  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> *  limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *=========================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This example illustrates how to import data into the \doxygen&#123;Image&#125;</span></span><br><span class="line"><span class="comment">// class. This is particularly useful for interfacing with other software</span></span><br><span class="line"><span class="comment">// systems. Many systems use a contiguous block of memory as a buffer</span></span><br><span class="line"><span class="comment">// for image pixel data. The current example assumes this is the case and</span></span><br><span class="line"><span class="comment">// feeds the buffer into an \doxygen&#123;ImportImageFilter&#125;, thereby producing an</span></span><br><span class="line"><span class="comment">// image as output.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Here we create a synthetic image with a centered sphere in</span></span><br><span class="line"><span class="comment">// a locally allocated buffer and pass this block of memory to the</span></span><br><span class="line"><span class="comment">// \code&#123;ImportImageFilter&#125;. This example is set up so that on execution, the</span></span><br><span class="line"><span class="comment">// user must provide the name of an output file as a command-line argument.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// \index&#123;itk::ImportImageFilter!Instantiation&#125;</span></span><br><span class="line"><span class="comment">// \index&#123;itk::ImportImageFilter!Header&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// First, the header file of the \doxygen&#123;ImportImageFilter&#125; class must be</span></span><br><span class="line"><span class="comment">// included.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkImage.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkImportImageFilter.h&quot;</span></span></span><br><span class="line"><span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkImageFileWriter.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="built_in">main</span>(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Usage: &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cerr &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;  outputImageFile&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Next, we select the data type used to represent the image pixels. We</span></span><br><span class="line">  <span class="comment">// assume that the external block of memory uses the same data type to</span></span><br><span class="line">  <span class="comment">// represent the pixels.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PixelType = <span class="keyword">unsigned</span> <span class="keyword">char</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Dimension = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">using</span> ImageType = itk::Image&lt;PixelType, Dimension&gt;;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// The type of the \code&#123;ImportImageFilter&#125; is instantiated in the</span></span><br><span class="line">  <span class="comment">// following line.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// \index&#123;itk::ImportImageFilter!Instantiation&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> ImportFilterType = itk::ImportImageFilter&lt;PixelType, Dimension&gt;;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// A filter object created using the \code&#123;New()&#125; method is then</span></span><br><span class="line">  <span class="comment">// assigned to a \code&#123;SmartPointer&#125;.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// \index&#123;itk::ImportImageFilter!Pointer&#125;</span></span><br><span class="line">  <span class="comment">// \index&#123;itk::ImportImageFilter!New()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : EndLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  ImportFilterType::Pointer importFilter = ImportFilterType::<span class="built_in">New</span>();</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// This filter requires the user to specify the size of the image to be</span></span><br><span class="line">  <span class="comment">// produced as output.  The \code&#123;SetRegion()&#125; method is used to this end.</span></span><br><span class="line">  <span class="comment">// The image size should exactly match the number of pixels available in the</span></span><br><span class="line">  <span class="comment">// locally allocated buffer.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// \index&#123;itk::ImportImageFilter!SetRegion()&#125;</span></span><br><span class="line">  <span class="comment">// \index&#123;itk::ImportImageFilter!New()&#125;</span></span><br><span class="line">  <span class="comment">// \index&#123;itk::ImportImageFilter!New()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : EndLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  ImportFilterType::SizeType size;</span><br><span class="line"></span><br><span class="line">  size[<span class="number">0</span>] = <span class="number">200</span>; <span class="comment">// size along X</span></span><br><span class="line">  size[<span class="number">1</span>] = <span class="number">200</span>; <span class="comment">// size along Y</span></span><br><span class="line">  size[<span class="number">2</span>] = <span class="number">200</span>; <span class="comment">// size along Z</span></span><br><span class="line"></span><br><span class="line">  ImportFilterType::IndexType start;</span><br><span class="line">  start.<span class="built_in">Fill</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  ImportFilterType::RegionType region;</span><br><span class="line">  region.<span class="built_in">SetIndex</span>(start);</span><br><span class="line">  region.<span class="built_in">SetSize</span>(size);</span><br><span class="line"></span><br><span class="line">  importFilter-&gt;<span class="built_in">SetRegion</span>(region);</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// The origin of the output image is specified with the \code&#123;SetOrigin()&#125;</span></span><br><span class="line">  <span class="comment">// method.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">const</span> itk::SpacePrecisionType origin[Dimension] = &#123; <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span> &#125;;</span><br><span class="line">  importFilter-&gt;<span class="built_in">SetOrigin</span>(origin);</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// The spacing of the image is passed with the \code&#123;SetSpacing()&#125; method.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="comment">// spacing isotropic volumes to 1.0</span></span><br><span class="line">  <span class="keyword">const</span> itk::SpacePrecisionType spacing[Dimension] = &#123; <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span> &#125;;</span><br><span class="line">  importFilter-&gt;<span class="built_in">SetSpacing</span>(spacing);</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Next we allocate the memory block containing the pixel data to be</span></span><br><span class="line">  <span class="comment">// passed to the \code&#123;ImportImageFilter&#125;. Note that we use exactly the</span></span><br><span class="line">  <span class="comment">// same size that was specified with the \code&#123;SetRegion()&#125; method. In a</span></span><br><span class="line">  <span class="comment">// practical application, you may get this buffer from some other library</span></span><br><span class="line">  <span class="comment">// using a different data structure to represent the images.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> numberOfPixels = size[<span class="number">0</span>] * size[<span class="number">1</span>] * size[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">auto</span> *             localBuffer = <span class="keyword">new</span> PixelType[numberOfPixels];</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">double</span> radius = <span class="number">80.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Here we fill up the buffer with a binary sphere. We use simple</span></span><br><span class="line">  <span class="comment">// \code&#123;for()&#125; loops here, similar to those found in the C or FORTRAN</span></span><br><span class="line">  <span class="comment">// programming languages. Note that ITK</span></span><br><span class="line">  <span class="comment">// does not use \code&#123;for()&#125; loops in its internal code to access</span></span><br><span class="line">  <span class="comment">// pixels. All pixel access tasks are instead performed using an</span></span><br><span class="line">  <span class="comment">// \doxygen&#123;ImageIterator&#125; that supports the management of</span></span><br><span class="line">  <span class="comment">// n-dimensional images.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">double</span> radius2 = radius * radius;</span><br><span class="line">  PixelType *      it = localBuffer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> z = <span class="number">0</span>; z &lt; size[<span class="number">2</span>]; z++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> dz =</span><br><span class="line">      <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(z) - <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(size[<span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> y = <span class="number">0</span>; y &lt; size[<span class="number">1</span>]; y++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">double</span> dy =</span><br><span class="line">        <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(y) - <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(size[<span class="number">1</span>]) / <span class="number">2.0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> x = <span class="number">0</span>; x &lt; size[<span class="number">0</span>]; x++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">double</span> dx =</span><br><span class="line">          <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(x) - <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(size[<span class="number">0</span>]) / <span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">double</span> d2 = dx * dx + dy * dy + dz * dz;</span><br><span class="line">        *it++ = (d2 &lt; radius2) ? <span class="number">255</span> : <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// The buffer is passed to the \code&#123;ImportImageFilter&#125; with the</span></span><br><span class="line">  <span class="comment">// \code&#123;SetImportPointer()&#125; method. Note that the last argument of this</span></span><br><span class="line">  <span class="comment">// method specifies who will be responsible for deleting the memory block</span></span><br><span class="line">  <span class="comment">// once it is no longer in use. A \code&#123;false&#125; value indicates that the</span></span><br><span class="line">  <span class="comment">// \code&#123;ImportImageFilter&#125; will not try to delete the buffer when its</span></span><br><span class="line">  <span class="comment">// destructor is called. A \code&#123;true&#125; value, on the other hand, will allow</span></span><br><span class="line">  <span class="comment">// the filter to delete the memory block upon destruction of the import</span></span><br><span class="line">  <span class="comment">// filter.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// For the \code&#123;ImportImageFilter&#125; to appropriately delete the</span></span><br><span class="line">  <span class="comment">// memory block, the memory must be allocated with the C++</span></span><br><span class="line">  <span class="comment">// \code&#123;new()&#125; operator. Memory allocated with other memory</span></span><br><span class="line">  <span class="comment">// allocation mechanisms, such as C \code&#123;malloc&#125; or \code&#123;calloc&#125;, will not</span></span><br><span class="line">  <span class="comment">// be deleted properly by the \code&#123;ImportImageFilter&#125;. In</span></span><br><span class="line">  <span class="comment">// other words, it is the application programmer&#x27;s responsibility</span></span><br><span class="line">  <span class="comment">// to ensure that \code&#123;ImportImageFilter&#125; is only given</span></span><br><span class="line">  <span class="comment">// permission to delete the C++ \code&#123;new&#125; operator-allocated memory.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">bool</span> importImageFilterWillOwnTheBuffer = <span class="literal">true</span>;</span><br><span class="line">  importFilter-&gt;<span class="built_in">SetImportPointer</span>(</span><br><span class="line">    localBuffer, numberOfPixels, importImageFilterWillOwnTheBuffer);</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Finally, we can connect the output of this filter to a pipeline.</span></span><br><span class="line">  <span class="comment">// For simplicity we just use a writer here, but it could be any other</span></span><br><span class="line">  <span class="comment">// filter.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> WriterType = itk::ImageFileWriter&lt;ImageType&gt;;</span><br><span class="line">  WriterType::Pointer writer = WriterType::<span class="built_in">New</span>();</span><br><span class="line"></span><br><span class="line">  writer-&gt;<span class="built_in">SetFileName</span>(argv[<span class="number">1</span>]);</span><br><span class="line">  writer-&gt;<span class="built_in">SetInput</span>(importFilter-&gt;<span class="built_in">GetOutput</span>());</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">  &#123;</span><br><span class="line">    writer-&gt;<span class="built_in">Update</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> itk::ExceptionObject &amp; exp)</span><br><span class="line">  &#123;</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;Exception caught !&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cerr &lt;&lt; exp &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> EXIT_FAILURE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Note that we do not call \code&#123;delete&#125; on the buffer since we pass</span></span><br><span class="line">  <span class="comment">// \code&#123;true&#125; as the last argument of \code&#123;SetImportPointer()&#125;. Now the</span></span><br><span class="line">  <span class="comment">// buffer is owned by the \code&#123;ImportImageFilter&#125;.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>point set</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkPointSet.h&quot;</span></span></span><br><span class="line"><span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="built_in">main</span>(<span class="keyword">int</span>, <span class="keyword">char</span> *[])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Then we must decide what type of value to associate with the</span></span><br><span class="line">  <span class="comment">//  points. This is generally called the \code&#123;PixelType&#125; in order to make</span></span><br><span class="line">  <span class="comment">//  the terminology consistent with the \code&#123;itk::Image&#125;. The PointSet is</span></span><br><span class="line">  <span class="comment">//  also templated over the dimension of the space in which the points are</span></span><br><span class="line">  <span class="comment">//  represented. The following declaration illustrates a typical</span></span><br><span class="line">  <span class="comment">//  instantiation of the PointSet class.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!Instantiation&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointSetType = itk::PointSet&lt;<span class="keyword">unsigned</span> <span class="keyword">short</span>, <span class="number">3</span>&gt;;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  A \code&#123;PointSet&#125; object is created by invoking the \code&#123;New()&#125; method</span></span><br><span class="line">  <span class="comment">//  on its type.  The resulting object must be assigned to a</span></span><br><span class="line">  <span class="comment">//  \code&#123;SmartPointer&#125;.  The PointSet is then reference-counted and can be</span></span><br><span class="line">  <span class="comment">//  shared by multiple objects. The memory allocated for the PointSet will</span></span><br><span class="line">  <span class="comment">//  be released when the number of references to the object is reduced to</span></span><br><span class="line">  <span class="comment">//  zero. This simply means that the user does not need to be concerned</span></span><br><span class="line">  <span class="comment">//  with invoking the \code&#123;Delete()&#125; method on this class.  In fact, the</span></span><br><span class="line">  <span class="comment">//  \code&#123;Delete()&#125; method should \textbf&#123;never&#125; be called directly within</span></span><br><span class="line">  <span class="comment">//  any of the reference-counted ITK classes.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!New()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!Pointer&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointSetType::Pointer pointsSet = PointSetType::<span class="built_in">New</span>();</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Following the principles of Generic Programming, the \code&#123;PointSet&#125;</span></span><br><span class="line">  <span class="comment">//  class has a set of associated defined types to ensure that interacting</span></span><br><span class="line">  <span class="comment">//  objects can be declared with compatible types. This set of type</span></span><br><span class="line">  <span class="comment">//  definitions is commonly known as a set of \emph&#123;traits&#125;.  Among the</span></span><br><span class="line">  <span class="comment">//  traits of the \code&#123;PointSet&#125; class is \code&#123;PointType&#125;, which is used</span></span><br><span class="line">  <span class="comment">//  by the point set to represent points in space. The following declaration</span></span><br><span class="line">  <span class="comment">//  takes the point type as defined in the \code&#123;PointSet&#125; traits and</span></span><br><span class="line">  <span class="comment">//  renames it to be conveniently used in the global namespace.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!PointType&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointType = PointSetType::PointType;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The \code&#123;PointType&#125; can now be used to declare point objects to be</span></span><br><span class="line">  <span class="comment">//  inserted in the \code&#123;PointSet&#125;. Points are fairly small objects, so</span></span><br><span class="line">  <span class="comment">//  it is inconvenient to manage them with reference counting and smart</span></span><br><span class="line">  <span class="comment">//  pointers. They are simply instantiated as typical C++ classes. The Point</span></span><br><span class="line">  <span class="comment">//  class inherits the \code&#123;[]&#125; operator from the \code&#123;itk::Array&#125; class.</span></span><br><span class="line">  <span class="comment">//  This makes it possible to access its components using index notation.</span></span><br><span class="line">  <span class="comment">//  For efficiency&#x27;s sake no bounds checking is performed during index</span></span><br><span class="line">  <span class="comment">//  access. It is the user&#x27;s responsibility to ensure that the index used is</span></span><br><span class="line">  <span class="comment">//  in the range</span></span><br><span class="line">  <span class="comment">//  $\&#123;0,Dimension-1\&#125;$. Each of the components in the point is associated</span></span><br><span class="line">  <span class="comment">//  with space coordinates. The following code illustrates how to</span></span><br><span class="line">  <span class="comment">//  instantiate a point and initialize its components.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointType p0;</span><br><span class="line">  p0[<span class="number">0</span>] = <span class="number">-1.0</span>; <span class="comment">//  x coordinate</span></span><br><span class="line">  p0[<span class="number">1</span>] = <span class="number">-1.0</span>; <span class="comment">//  y coordinate</span></span><br><span class="line">  p0[<span class="number">2</span>] = <span class="number">0.0</span>;  <span class="comment">//  z coordinate</span></span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  PointType p1;</span><br><span class="line"></span><br><span class="line">  p1[<span class="number">0</span>] = <span class="number">1.0</span>; <span class="comment">// Point 1 = &#123; 1,-1,0 &#125;</span></span><br><span class="line">  p1[<span class="number">1</span>] = <span class="number">-1.0</span>;</span><br><span class="line">  p1[<span class="number">2</span>] = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  PointType p2; <span class="comment">// Point 2 = &#123; 1,1,0 &#125;</span></span><br><span class="line">  p2[<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line">  p2[<span class="number">1</span>] = <span class="number">1.0</span>;</span><br><span class="line">  p2[<span class="number">2</span>] = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Points are inserted in the PointSet by using the \code&#123;SetPoint()&#125;</span></span><br><span class="line">  <span class="comment">//  method. This method requires the user to provide a unique identifier for</span></span><br><span class="line">  <span class="comment">//  the point. The identifier is typically an unsigned integer that will</span></span><br><span class="line">  <span class="comment">//  enumerate the points as they are being inserted. The following code</span></span><br><span class="line">  <span class="comment">//  shows how three points are inserted into the PointSet.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!SetPoint()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  pointsSet-&gt;<span class="built_in">SetPoint</span>(<span class="number">0</span>, p0);</span><br><span class="line">  pointsSet-&gt;<span class="built_in">SetPoint</span>(<span class="number">1</span>, p1);</span><br><span class="line">  pointsSet-&gt;<span class="built_in">SetPoint</span>(<span class="number">2</span>, p2);</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// It is possible to query the PointSet in order to determine how many</span></span><br><span class="line">  <span class="comment">// points have been inserted into it. This is done with the</span></span><br><span class="line">  <span class="comment">// \code&#123;GetNumberOfPoints()&#125; method as illustrated below.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!GetNumberOfPoints()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> numberOfPoints = pointsSet-&gt;<span class="built_in">GetNumberOfPoints</span>();</span><br><span class="line">  std::cout &lt;&lt; numberOfPoints &lt;&lt; std::endl;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Points can be read from the PointSet by using the \code&#123;GetPoint()&#125;</span></span><br><span class="line">  <span class="comment">// method and the integer identifier. The point is stored in a pointer</span></span><br><span class="line">  <span class="comment">// provided by the user. If the identifier provided does not match an</span></span><br><span class="line">  <span class="comment">// existing point, the method will return \code&#123;false&#125; and the contents of</span></span><br><span class="line">  <span class="comment">// the point will be invalid. The following code illustrates point access</span></span><br><span class="line">  <span class="comment">// using defensive programming.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!GetPoint()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointType pp;</span><br><span class="line">  <span class="keyword">bool</span>      pointExists = pointsSet-&gt;<span class="built_in">GetPoint</span>(<span class="number">1</span>, &amp;pp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pointExists)</span><br><span class="line">  &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Point is = &quot;</span> &lt;&lt; pp &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// \code&#123;GetPoint()&#125; and \code&#123;SetPoint()&#125; are not the most efficient</span></span><br><span class="line">  <span class="comment">// methods to access points in the PointSet. It is preferable to get direct</span></span><br><span class="line">  <span class="comment">// access to the internal point container defined by the \emph&#123;traits&#125; and</span></span><br><span class="line">  <span class="comment">// use iterators to walk sequentially over the list of points (as shown in</span></span><br><span class="line">  <span class="comment">// the following example).</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过迭代器访问<code>pointsset</code>中的points容器（保存了点的位置信息）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*=========================================================================</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Copyright NumFOCUS</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> *  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> *  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *         http://www.apache.org/licenses/LICENSE-2.0.txt</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> *  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> *  limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *=========================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  The \doxygen&#123;PointSet&#125; class uses an internal container to manage the</span></span><br><span class="line"><span class="comment">//  storage of \doxygen&#123;Point&#125;s. It is more efficient, in general, to manage</span></span><br><span class="line"><span class="comment">//  points by using the access methods provided directly on the points</span></span><br><span class="line"><span class="comment">//  container. The following example illustrates how to interact with the</span></span><br><span class="line"><span class="comment">//  point container and how to use point iterators.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkPointSet.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="built_in">main</span>(<span class="keyword">int</span>, <span class="keyword">char</span> *[])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">using</span> PointSetType = itk::PointSet&lt;<span class="keyword">unsigned</span> <span class="keyword">short</span>, <span class="number">3</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The type is defined by the \emph&#123;traits&#125; of the \code&#123;PointSet&#125;</span></span><br><span class="line">  <span class="comment">//  class. The following line conveniently takes the \code&#123;PointsContainer&#125;</span></span><br><span class="line">  <span class="comment">//  type from the \code&#123;PointSet&#125; traits and declares it in the global</span></span><br><span class="line">  <span class="comment">//  namespace.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!PointsContainer&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointsContainer = PointSetType::PointsContainer;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The actual type of \code&#123;PointsContainer&#125; depends on what style of</span></span><br><span class="line">  <span class="comment">//  \code&#123;PointSet&#125; is being used. The dynamic \code&#123;PointSet&#125; uses</span></span><br><span class="line">  <span class="comment">//  \doxygen&#123;MapContainer&#125; while the static \code&#123;PointSet&#125; uses</span></span><br><span class="line">  <span class="comment">//  \doxygen&#123;VectorContainer&#125;. The vector and map containers are basically</span></span><br><span class="line">  <span class="comment">//  ITK wrappers around the \href&#123;http://www.sgi.com/tech/stl/&#125;&#123;STL&#125;</span></span><br><span class="line">  <span class="comment">//  classes \href&#123;http://www.sgi.com/tech/stl/Map.html&#125;&#123;\code&#123;std::map&#125;&#125;</span></span><br><span class="line">  <span class="comment">//  and \href&#123;http://www.sgi.com/tech/stl/Vector.html&#125;&#123;\code&#123;std::vector&#125;&#125;.</span></span><br><span class="line">  <span class="comment">//  By default, \code&#123;PointSet&#125; uses a static style, and therefore the</span></span><br><span class="line">  <span class="comment">//  default type of point container is \code&#123;VectorContainer&#125;.  Both map and</span></span><br><span class="line">  <span class="comment">//  vector containers are templated over the type of element they contain.</span></span><br><span class="line">  <span class="comment">//  In this case they are templated over \code&#123;PointType&#125;. Containers are</span></span><br><span class="line">  <span class="comment">//  reference counted objects, created with the \code&#123;New()&#125; method and</span></span><br><span class="line">  <span class="comment">//  assigned to a \doxygen&#123;SmartPointer&#125;. The following line creates a point</span></span><br><span class="line">  <span class="comment">//  container compatible with the type of the \code&#123;PointSet&#125; from which the</span></span><br><span class="line">  <span class="comment">//  trait has been taken.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointsContainer!New()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointsContainer!Pointer&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointsContainer::Pointer points = PointsContainer::<span class="built_in">New</span>();<span class="comment">//points是点集</span></span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \code&#123;Point&#125;s can now be defined using the \code&#123;PointType&#125; trait from</span></span><br><span class="line">  <span class="comment">//  the \code&#123;PointSet&#125;.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointType = PointSetType::PointType;</span><br><span class="line">  PointType p0;</span><br><span class="line">  PointType p1;</span><br><span class="line">  p0[<span class="number">0</span>] = <span class="number">-1.0</span>;</span><br><span class="line">  p0[<span class="number">1</span>] = <span class="number">0.0</span>;</span><br><span class="line">  p0[<span class="number">2</span>] = <span class="number">0.0</span>; <span class="comment">// Point 0 = &#123;-1,0,0 &#125;</span></span><br><span class="line">  p1[<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line">  p1[<span class="number">1</span>] = <span class="number">0.0</span>;</span><br><span class="line">  p1[<span class="number">2</span>] = <span class="number">0.0</span>; <span class="comment">// Point 1 = &#123; 1,0,0 &#125;</span></span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line">  <span class="comment">// point类型就是数组保存三个位置的参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The created points can be inserted in the \code&#123;PointsContainer&#125; using</span></span><br><span class="line">  <span class="comment">//  the generic method \code&#123;InsertElement()&#125; which requires an identifier</span></span><br><span class="line">  <span class="comment">//  to be provided for each point.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointsContainer!InsertElement()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointsContainer!InsertElement()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::VectorContainer!InsertElement()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::MapContainer!InsertElement()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> pointId = <span class="number">0</span>;</span><br><span class="line">  points-&gt;<span class="built_in">InsertElement</span>(pointId++, p0);</span><br><span class="line">  points-&gt;<span class="built_in">InsertElement</span>(pointId++, p1);</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  PointSetType::Pointer pointSet = PointSetType::<span class="built_in">New</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Finally, the \code&#123;PointsContainer&#125; can be assigned to the</span></span><br><span class="line">  <span class="comment">//  \code&#123;PointSet&#125;. This will substitute any previously existing</span></span><br><span class="line">  <span class="comment">//  \code&#123;PointsContainer&#125; assigned to the \code&#123;PointSet&#125;. The assignment</span></span><br><span class="line">  <span class="comment">//  is done using the \code&#123;SetPoints()&#125; method.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!SetPoints()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  pointSet-&gt;<span class="built_in">SetPoints</span>(points);</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The \code&#123;PointsContainer&#125; object can be obtained from the</span></span><br><span class="line">  <span class="comment">//  \code&#123;PointSet&#125; using the \code&#123;GetPoints()&#125; method.  This method</span></span><br><span class="line">  <span class="comment">//  returns a pointer to the actual container owned by the PointSet which is</span></span><br><span class="line">  <span class="comment">//  then assigned to a \code&#123;SmartPointer&#125;.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!GetPoints()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointsContainer!Pointer&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointsContainer::Pointer points2 = pointSet-&gt;<span class="built_in">GetPoints</span>();</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The most efficient way to sequentially visit the points is to use the</span></span><br><span class="line">  <span class="comment">//  iterators provided by PointsContainer. The \code&#123;Iterator&#125; type belongs</span></span><br><span class="line">  <span class="comment">//  to the traits of the PointsContainer classes. It behaves pretty much</span></span><br><span class="line">  <span class="comment">//  like the STL iterators.\footnote&#123;If you dig deep enough into the code,</span></span><br><span class="line">  <span class="comment">//  you will discover that these iterators are actually ITK wrappers around</span></span><br><span class="line">  <span class="comment">//  STL iterators.&#125;  The Points iterator is not a reference counted class,</span></span><br><span class="line">  <span class="comment">//  so it is created directly from the traits without using SmartPointers.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointsContainer!Iterator&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointsIterator = PointsContainer::Iterator;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The subsequent use of the iterator follows what you may expect from a</span></span><br><span class="line">  <span class="comment">//  STL iterator. The iterator to the first point is obtained from the</span></span><br><span class="line">  <span class="comment">//  container with the \code&#123;Begin()&#125; method and assigned to another</span></span><br><span class="line">  <span class="comment">//  iterator.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointsContainer!Begin()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointsIterator pointIterator = points-&gt;<span class="built_in">Begin</span>();</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The \code&#123;++&#125; operator on the iterator can be used to advance from one</span></span><br><span class="line">  <span class="comment">//  point to the next. The actual value of the Point to which the iterator</span></span><br><span class="line">  <span class="comment">//  is pointing can be obtained with the \code&#123;Value()&#125; method. The loop for</span></span><br><span class="line">  <span class="comment">//  walking through all the points can be controlled by comparing the</span></span><br><span class="line">  <span class="comment">//  current iterator with the iterator returned by the \code&#123;End()&#125; method</span></span><br><span class="line">  <span class="comment">//  of the PointsContainer. The following lines illustrate the typical loop</span></span><br><span class="line">  <span class="comment">//  for walking through the points.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointsContainer!End()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointsContainer!Iterator&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointsIterator end = points-&gt;<span class="built_in">End</span>();</span><br><span class="line">  <span class="keyword">while</span> (pointIterator != end)</span><br><span class="line">  &#123;</span><br><span class="line">    PointType p = pointIterator.<span class="built_in">Value</span>(); <span class="comment">// access the point</span></span><br><span class="line">    std::cout &lt;&lt; p &lt;&lt; std::endl;         <span class="comment">// print the point</span></span><br><span class="line">    ++pointIterator;                     <span class="comment">// advance to next point</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Note that as in STL, the iterator returned by the \code&#123;End()&#125; method is</span></span><br><span class="line">  <span class="comment">//  not a valid iterator. This is called a past-end iterator in order to</span></span><br><span class="line">  <span class="comment">//  indicate that it is the value resulting from advancing one step after</span></span><br><span class="line">  <span class="comment">//  visiting the last element in the container.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The number of elements stored in a container can be queried with the</span></span><br><span class="line">  <span class="comment">//  \code&#123;Size()&#125; method. In the case of the PointSet, the following two</span></span><br><span class="line">  <span class="comment">//  lines of code are equivalent, both of them returning the number of</span></span><br><span class="line">  <span class="comment">//  points in the PointSet.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!GetNumberOfPoints()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!GetPoints()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointsContainer!Size()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  std::cout &lt;&lt; pointSet-&gt;<span class="built_in">GetNumberOfPoints</span>() &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; pointSet-&gt;<span class="built_in">GetPoints</span>()-&gt;<span class="built_in">Size</span>() &lt;&lt; std::endl;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>改变点的数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*=========================================================================</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Copyright NumFOCUS</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> *  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> *  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *         http://www.apache.org/licenses/LICENSE-2.0.txt</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> *  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> *  limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *=========================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  The \doxygen&#123;PointSet&#125; class was designed to interact with the</span></span><br><span class="line"><span class="comment">//  \code&#123;Image&#125; class. For this reason it was found convenient to allow the</span></span><br><span class="line"><span class="comment">//  points in the set to hold values that could be computed from images. The</span></span><br><span class="line"><span class="comment">//  value associated with the point is referred as \code&#123;PixelType&#125; in order</span></span><br><span class="line"><span class="comment">//  to make it consistent with image terminology. Users can define the type as</span></span><br><span class="line"><span class="comment">//  they please thanks to the flexibility offered by the Generic Programming</span></span><br><span class="line"><span class="comment">//  approach used in the toolkit.  The \code&#123;PixelType&#125; is the first template</span></span><br><span class="line"><span class="comment">//  parameter of the PointSet.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  \index&#123;itk::PointSet!PixelType&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkPointSet.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="built_in">main</span>(<span class="keyword">int</span>, <span class="keyword">char</span> *[])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The following code defines a particular type for a pixel type and</span></span><br><span class="line">  <span class="comment">//  instantiates a PointSet class with it.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PixelType = <span class="keyword">unsigned</span> <span class="keyword">short</span>; <span class="comment">//注意pixeltype从才是点的数据类型，PointType是点的位置</span></span><br><span class="line">  <span class="keyword">using</span> PointSetType = itk::PointSet&lt;PixelType, <span class="number">3</span>&gt;;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A point set is instantiated here</span></span><br><span class="line">  PointSetType::Pointer pointSet = PointSetType::<span class="built_in">New</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Data can be inserted into the PointSet using the \code&#123;SetPointData()&#125;</span></span><br><span class="line">  <span class="comment">//  method. This method requires the user to provide an identifier. The data</span></span><br><span class="line">  <span class="comment">//  in question will be associated to the point holding the same identifier.</span></span><br><span class="line">  <span class="comment">//  It is the user&#x27;s responsibility to verify the appropriate matching</span></span><br><span class="line">  <span class="comment">//  between inserted data and inserted points. The following line</span></span><br><span class="line">  <span class="comment">//  illustrates the use of the \code&#123;SetPointData()&#125; method.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!SetPointData()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> dataId = <span class="number">0</span>;</span><br><span class="line">  PixelType    value = <span class="number">79</span>;</span><br><span class="line">  pointSet-&gt;<span class="built_in">SetPointData</span>(dataId++, value);</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Data associated with points can be read from the PointSet using the</span></span><br><span class="line">  <span class="comment">//  \code&#123;GetPointData()&#125; method. This method requires the user to provide</span></span><br><span class="line">  <span class="comment">//  the identifier to the point and a valid pointer to a location where the</span></span><br><span class="line">  <span class="comment">//  pixel data can be safely written. In case the identifier does not match</span></span><br><span class="line">  <span class="comment">//  any existing identifier on the PointSet the method will return</span></span><br><span class="line">  <span class="comment">//  \code&#123;false&#125; and the pixel value returned will be invalid. It is the</span></span><br><span class="line">  <span class="comment">//  user&#x27;s responsibility to check the returned boolean value before</span></span><br><span class="line">  <span class="comment">//  attempting to use it.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!GetPointData()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">bool</span> found = pointSet-&gt;<span class="built_in">GetPointData</span>(dataId, &amp;value);</span><br><span class="line">  <span class="keyword">if</span> (found)</span><br><span class="line">  &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Pixel value = &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The \code&#123;SetPointData()&#125; and \code&#123;GetPointData()&#125; methods are not the</span></span><br><span class="line">  <span class="comment">//  most efficient way to get access to point data. It is far more efficient</span></span><br><span class="line">  <span class="comment">//  to use the Iterators provided by the \code&#123;PointDataContainer&#125;.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Data associated with points is internally stored in</span></span><br><span class="line">  <span class="comment">//  \code&#123;PointDataContainer&#125;s.  In the same way as with points, the actual</span></span><br><span class="line">  <span class="comment">//  container type used depend on whether the style of the PointSet is</span></span><br><span class="line">  <span class="comment">//  static or dynamic. Static point sets will use an</span></span><br><span class="line">  <span class="comment">//  \doxygen&#123;VectorContainer&#125; while dynamic point sets will use an</span></span><br><span class="line">  <span class="comment">//  \doxygen&#123;MapContainer&#125;.  The type of the data container is defined as</span></span><br><span class="line">  <span class="comment">//  one of the traits in the PointSet. The following declaration illustrates</span></span><br><span class="line">  <span class="comment">//  how the type can be taken from the traits and used to conveniently</span></span><br><span class="line">  <span class="comment">//  declare a similar type on the global namespace.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!PointDataContainer&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointDataContainer = PointSetType::PointDataContainer;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Using the type it is now possible to create an instance of the data</span></span><br><span class="line">  <span class="comment">//  container. This is a standard reference counted object, henceforth it</span></span><br><span class="line">  <span class="comment">//  uses the \code&#123;New()&#125; method for creation and assigns the newly created</span></span><br><span class="line">  <span class="comment">//  object to a SmartPointer.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointDataContainer!New()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointDataContainer!Pointer&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointDataContainer::Pointer pointData = PointDataContainer::<span class="built_in">New</span>();</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Pixel data can be inserted in the container with the method</span></span><br><span class="line">  <span class="comment">//  \code&#123;InsertElement()&#125;. This method requires an identified to be</span></span><br><span class="line">  <span class="comment">//  provided for each point data.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointDataContainer!InsertElement()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::VectorContainer!InsertElement()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::MapContainer!InsertElement()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> pointId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  PixelType value0 = <span class="number">34</span>;</span><br><span class="line">  PixelType value1 = <span class="number">67</span>;</span><br><span class="line"></span><br><span class="line">  pointData-&gt;<span class="built_in">InsertElement</span>(pointId++, value0);</span><br><span class="line">  pointData-&gt;<span class="built_in">InsertElement</span>(pointId++, value1);</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Finally the PointDataContainer can be assigned to the PointSet. This</span></span><br><span class="line">  <span class="comment">//  will substitute any previously existing PointDataContainer on the</span></span><br><span class="line">  <span class="comment">//  PointSet. The assignment is done using the \code&#123;SetPointData()&#125; method.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!SetPointData()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  pointSet-&gt;<span class="built_in">SetPointData</span>(pointData);</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The PointDataContainer can be obtained from the PointSet using the</span></span><br><span class="line">  <span class="comment">//  \code&#123;GetPointData()&#125; method.  This method returns a pointer (assigned</span></span><br><span class="line">  <span class="comment">//  to a SmartPointer) to the actual container owned by the PointSet.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!GetPointData()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointDataContainer::Pointer pointData2 = pointSet-&gt;<span class="built_in">GetPointData</span>();</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The most efficient way to sequentially visit the data associated with</span></span><br><span class="line">  <span class="comment">//  points is to use the iterators provided by \code&#123;PointDataContainer&#125;.</span></span><br><span class="line">  <span class="comment">//  The \code&#123;Iterator&#125; type belongs to the traits of the PointsContainer</span></span><br><span class="line">  <span class="comment">//  classes. The iterator is not a reference counted class, so it is just</span></span><br><span class="line">  <span class="comment">//  created directly from the traits without using SmartPointers.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointDataContainer!Iterator&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointDataIterator = PointDataContainer::Iterator;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The subsequent use of the iterator follows what you may expect from a</span></span><br><span class="line">  <span class="comment">//  STL iterator. The iterator to the first point is obtained from the</span></span><br><span class="line">  <span class="comment">//  container with the \code&#123;Begin()&#125; method and assigned to another</span></span><br><span class="line">  <span class="comment">//  iterator.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointDataContainer!Begin()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointDataIterator pointDataIterator = pointData2-&gt;<span class="built_in">Begin</span>();</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The \code&#123;++&#125; operator on the iterator can be used to advance from one</span></span><br><span class="line">  <span class="comment">//  data point to the next. The actual value of the PixelType to which the</span></span><br><span class="line">  <span class="comment">//  iterator is pointing can be obtained with the \code&#123;Value()&#125;</span></span><br><span class="line">  <span class="comment">//  method. The loop for walking through all the point data can be</span></span><br><span class="line">  <span class="comment">//  controlled by comparing the current iterator with the iterator returned</span></span><br><span class="line">  <span class="comment">//  by the \code&#123;End()&#125; method of the PointsContainer. The following lines</span></span><br><span class="line">  <span class="comment">//  illustrate the typical loop for walking through the point data.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointDataContainer!End()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;PointDataContainer!increment ++&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointDataIterator end = pointData2-&gt;<span class="built_in">End</span>();</span><br><span class="line">  <span class="keyword">while</span> (pointDataIterator != end)</span><br><span class="line">  &#123;</span><br><span class="line">    PixelType p = pointDataIterator.<span class="built_in">Value</span>(); <span class="comment">// access the pixel data</span></span><br><span class="line">    std::cout &lt;&lt; p &lt;&lt; std::endl;             <span class="comment">// print the pixel data</span></span><br><span class="line">    ++pointDataIterator;                     <span class="comment">// advance to next pixel/point</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Note that as in STL, the iterator returned by the \code&#123;End()&#125; method is</span></span><br><span class="line">  <span class="comment">//  not a valid iterator. This is called a \emph&#123;past-end&#125; iterator in order</span></span><br><span class="line">  <span class="comment">//  to indicate that it is the value resulting from advancing one step after</span></span><br><span class="line">  <span class="comment">//  visiting the last element in the container.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用RGB作为<code>PixelType</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkRGBPixel.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkPointSet.h&quot;</span></span></span><br><span class="line"><span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="built_in">main</span>(<span class="keyword">int</span>, <span class="keyword">char</span> *[])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Then, the pixel type can be defined by selecting the type to be used to</span></span><br><span class="line">  <span class="comment">//  represent each one of the RGB components.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::RGBPixel!Instantiation&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PixelType = itk::RGBPixel&lt;<span class="keyword">float</span>&gt;;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The newly defined pixel type is now used to instantiate the PointSet</span></span><br><span class="line">  <span class="comment">//  type and subsequently create a point set object.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointSetType = itk::PointSet&lt;PixelType, <span class="number">3</span>&gt;;</span><br><span class="line">  PointSetType::Pointer pointSet = PointSetType::<span class="built_in">New</span>();</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The following code generates a circle and assigns RGB values to</span></span><br><span class="line">  <span class="comment">//  the points. The components of the RGB values in this example are</span></span><br><span class="line">  <span class="comment">//  computed to represent the position of the points.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!SetPoint()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!SetPointData()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointSetType::PixelType pixel; <span class="comment">//点的值</span></span><br><span class="line">  PointSetType::PointType point; <span class="comment">//点的位置</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span>            pointId = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">double</span>        radius = <span class="number">3.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">360</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> angle = i * itk::Math::pi / <span class="number">180.0</span>;</span><br><span class="line">    point[<span class="number">0</span>] = radius * std::<span class="built_in">sin</span>(angle);</span><br><span class="line">    point[<span class="number">1</span>] = radius * std::<span class="built_in">cos</span>(angle);</span><br><span class="line">    point[<span class="number">2</span>] = <span class="number">1.0</span>;</span><br><span class="line">    pixel.<span class="built_in">SetRed</span>(point[<span class="number">0</span>] * <span class="number">2.0</span>);</span><br><span class="line">    pixel.<span class="built_in">SetGreen</span>(point[<span class="number">1</span>] * <span class="number">2.0</span>);</span><br><span class="line">    pixel.<span class="built_in">SetBlue</span>(point[<span class="number">2</span>] * <span class="number">2.0</span>);</span><br><span class="line">    pointSet-&gt;<span class="built_in">SetPoint</span>(pointId, point);</span><br><span class="line">    pointSet-&gt;<span class="built_in">SetPointData</span>(pointId, pixel);</span><br><span class="line">    pointId++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  All the points on the PointSet are visited using the following code.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!GetPoints()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!points iterator&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!iterating points&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointIterator = PointSetType::PointsContainer::ConstIterator;</span><br><span class="line">  PointIterator pointIterator = pointSet-&gt;<span class="built_in">GetPoints</span>()-&gt;<span class="built_in">Begin</span>();<span class="comment">//获得点集的容器</span></span><br><span class="line">  PointIterator pointEnd = pointSet-&gt;<span class="built_in">GetPoints</span>()-&gt;<span class="built_in">End</span>();</span><br><span class="line">  <span class="keyword">while</span> (pointIterator != pointEnd)</span><br><span class="line">  &#123;</span><br><span class="line">    point = pointIterator.<span class="built_in">Value</span>();</span><br><span class="line">    std::cout &lt;&lt; point &lt;&lt; std::endl;</span><br><span class="line">    ++pointIterator;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Note that here the \code&#123;ConstIterator&#125; was used instead of the</span></span><br><span class="line">  <span class="comment">//  \code&#123;Iterator&#125; since the pixel values are not expected to be modified.</span></span><br><span class="line">  <span class="comment">//  ITK supports const-correctness at the API level.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  All the pixel values on the PointSet are visited using the following</span></span><br><span class="line">  <span class="comment">//  code.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!GetPointData()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!data iterator&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!iterating point data&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointDataIterator = PointSetType::PointDataContainer::ConstIterator;</span><br><span class="line">  PointDataIterator pixelIterator = pointSet-&gt;<span class="built_in">GetPointData</span>()-&gt;<span class="built_in">Begin</span>();<span class="comment">//获得点值的容器</span></span><br><span class="line">  PointDataIterator pixelEnd = pointSet-&gt;<span class="built_in">GetPointData</span>()-&gt;<span class="built_in">End</span>();</span><br><span class="line">  <span class="keyword">while</span> (pixelIterator != pixelEnd)</span><br><span class="line">  &#123;</span><br><span class="line">    pixel = pixelIterator.<span class="built_in">Value</span>();</span><br><span class="line">    std::cout &lt;&lt; pixel &lt;&lt; std::endl;</span><br><span class="line">    ++pixelIterator;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Again, please note the use of the  \code&#123;ConstIterator&#125; instead of the</span></span><br><span class="line">  <span class="comment">//  \code&#123;Iterator&#125;.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;ConstIterator&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;const-correctness&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>vector作为PixelType</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*=========================================================================</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Copyright NumFOCUS</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> *  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> *  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *         http://www.apache.org/licenses/LICENSE-2.0.txt</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> *  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> *  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> *  limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *=========================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  This example illustrates how a point set can be parameterized to manage a</span></span><br><span class="line"><span class="comment">//  particular pixel type. It is quite common to associate vector values with</span></span><br><span class="line"><span class="comment">//  points for producing geometric representations.  The following code shows</span></span><br><span class="line"><span class="comment">//  how vector values can be used as the pixel type on the PointSet class. The</span></span><br><span class="line"><span class="comment">//  \doxygen&#123;Vector&#125; class is used here as the pixel type. This class is</span></span><br><span class="line"><span class="comment">//  appropriate for representing the relative position between two points. It</span></span><br><span class="line"><span class="comment">//  could then be used to manage displacements, for example.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  \index&#123;itk::PointSet!Vector pixels&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  In order to use the vector class it is necessary to include its header</span></span><br><span class="line"><span class="comment">//  file along with the header of the point set.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkVector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;itkPointSet.h&quot;</span></span></span><br><span class="line"><span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="built_in">main</span>(<span class="keyword">int</span>, <span class="keyword">char</span> *[])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \begin&#123;floatingfigure&#125;[rlp]&#123;6cm&#125;</span></span><br><span class="line">  <span class="comment">//    \centering</span></span><br><span class="line">  <span class="comment">//    \includegraphics[width=4cm]&#123;PointSetWithVectors&#125;</span></span><br><span class="line">  <span class="comment">//    \caption[PointSet with Vectors as PixelType]&#123;Vectors as</span></span><br><span class="line">  <span class="comment">//    PixelType.\label&#123;fig:PointSetWithVectors&#125;&#125;</span></span><br><span class="line">  <span class="comment">//  \end&#123;floatingfigure&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The \code&#123;Vector&#125; class is templated over the type used to represent</span></span><br><span class="line">  <span class="comment">//  the spatial coordinates and over the space dimension.  Since the</span></span><br><span class="line">  <span class="comment">//  PixelType is independent of the PointType, we are free to select any</span></span><br><span class="line">  <span class="comment">//  dimension for the vectors to be used as pixel type. However, for the</span></span><br><span class="line">  <span class="comment">//  sake of producing an interesting example, we will use vectors that</span></span><br><span class="line">  <span class="comment">//  represent displacements of the points in the PointSet. Those vectors</span></span><br><span class="line">  <span class="comment">//  are then selected to be of the same dimension as the PointSet.\newline</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::Vector!itk::PointSet&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Dimension = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">using</span> PixelType = itk::Vector&lt;<span class="keyword">float</span>, Dimension&gt;;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Then we use the PixelType (which are actually Vectors) to instantiate</span></span><br><span class="line">  <span class="comment">//  the PointSet type and subsequently create a PointSet object.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointSetType = itk::PointSet&lt;PixelType, Dimension&gt;;</span><br><span class="line">  PointSetType::Pointer pointSet = PointSetType::<span class="built_in">New</span>();</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The following code is generating a sphere and assigning vector values</span></span><br><span class="line">  <span class="comment">//  to the points. The components of the vectors in this example are</span></span><br><span class="line">  <span class="comment">//  computed to represent the tangents to the circle as shown in</span></span><br><span class="line">  <span class="comment">//  Figure~\ref&#123;fig:PointSetWithVectors&#125;.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!SetPoint()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!SetPointData()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  PointSetType::PixelType tangent;</span><br><span class="line">  PointSetType::PointType point;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span>     pointId = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="keyword">double</span> radius = <span class="number">300.0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">360</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> angle = i * itk::Math::pi / <span class="number">180.0</span>;</span><br><span class="line">    point[<span class="number">0</span>] = radius * std::<span class="built_in">sin</span>(angle);</span><br><span class="line">    point[<span class="number">1</span>] = radius * std::<span class="built_in">cos</span>(angle);</span><br><span class="line">    point[<span class="number">2</span>] = <span class="number">1.0</span>; <span class="comment">// flat on the Z plane</span></span><br><span class="line">    tangent[<span class="number">0</span>] = std::<span class="built_in">cos</span>(angle);</span><br><span class="line">    tangent[<span class="number">1</span>] = -std::<span class="built_in">sin</span>(angle);</span><br><span class="line">    tangent[<span class="number">2</span>] = <span class="number">0.0</span>; <span class="comment">// flat on the Z plane</span></span><br><span class="line">    pointSet-&gt;<span class="built_in">SetPoint</span>(pointId, point);</span><br><span class="line">    pointSet-&gt;<span class="built_in">SetPointData</span>(pointId, tangent);</span><br><span class="line">    pointId++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  We can now visit all the points and use the vector on the pixel values</span></span><br><span class="line">  <span class="comment">//  to apply a displacement on the points. This is along the spirit of what</span></span><br><span class="line">  <span class="comment">//  a deformable model could do at each one of its iterations.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!PointIterator&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!GetPoints()&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!GetPointData()&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  <span class="keyword">using</span> PointDataIterator = PointSetType::PointDataContainer::ConstIterator;</span><br><span class="line">  PointDataIterator pixelIterator = pointSet-&gt;<span class="built_in">GetPointData</span>()-&gt;<span class="built_in">Begin</span>();</span><br><span class="line">  PointDataIterator pixelEnd = pointSet-&gt;<span class="built_in">GetPointData</span>()-&gt;<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">using</span> PointIterator = PointSetType::PointsContainer::Iterator;</span><br><span class="line">  PointIterator pointIterator = pointSet-&gt;<span class="built_in">GetPoints</span>()-&gt;<span class="built_in">Begin</span>();</span><br><span class="line">  PointIterator pointEnd = pointSet-&gt;<span class="built_in">GetPoints</span>()-&gt;<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (pixelIterator != pixelEnd &amp;&amp; pointIterator != pointEnd)</span><br><span class="line">  &#123;</span><br><span class="line">    pointIterator.<span class="built_in">Value</span>() = pointIterator.<span class="built_in">Value</span>() + pixelIterator.<span class="built_in">Value</span>();</span><br><span class="line">    ++pixelIterator;</span><br><span class="line">    ++pointIterator;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Note that the \code&#123;ConstIterator&#125; was used here instead of the normal</span></span><br><span class="line">  <span class="comment">//  \code&#123;Iterator&#125; since the pixel values are only intended to be read and</span></span><br><span class="line">  <span class="comment">//  not modified. ITK supports const-correctness at the API level.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;ConstIterator&#125;</span></span><br><span class="line">  <span class="comment">//  \index&#123;const-correctness&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  The \doxygen&#123;Vector&#125; class has overloaded the \code&#123;+&#125; operator with</span></span><br><span class="line">  <span class="comment">//  the \doxygen&#123;Point&#125;. In other words, vectors can be added to points in</span></span><br><span class="line">  <span class="comment">//  order to produce new points.  This property is exploited in the center</span></span><br><span class="line">  <span class="comment">//  of the loop in order to update the points positions with a single</span></span><br><span class="line">  <span class="comment">//  statement.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  \index&#123;itk::PointSet!PointIterator&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  We can finally visit all the points and print out the new values</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Software Guide : BeginCodeSnippet</span></span><br><span class="line">  pointIterator = pointSet-&gt;<span class="built_in">GetPoints</span>()-&gt;<span class="built_in">Begin</span>();</span><br><span class="line">  pointEnd = pointSet-&gt;<span class="built_in">GetPoints</span>()-&gt;<span class="built_in">End</span>();</span><br><span class="line">  <span class="keyword">while</span> (pointIterator != pointEnd)</span><br><span class="line">  &#123;</span><br><span class="line">    std::cout &lt;&lt; pointIterator.<span class="built_in">Value</span>() &lt;&lt; std::endl;</span><br><span class="line">    ++pointIterator;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Software Guide : EndCodeSnippet</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  Software Guide : BeginLatex</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Note that \doxygen&#123;Vector&#125; is not the appropriate class for</span></span><br><span class="line">  <span class="comment">//  representing normals to surfaces and gradients of functions. This is due</span></span><br><span class="line">  <span class="comment">//  to the way vectors behave under affine transforms. ITK has a</span></span><br><span class="line">  <span class="comment">//  specific class for representing normals and function gradients. This is</span></span><br><span class="line">  <span class="comment">//  the \doxygen&#123;CovariantVector&#125; class.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//  Software Guide : EndLatex</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Itk</tag>
        <tag>医学图像处理</tag>
      </tags>
  </entry>
</search>
